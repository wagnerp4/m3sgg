name: Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
      python_version:
        description: 'Python version to test'
        required: false
        default: '3.10'
        type: choice
        options:
        - '3.10'
        - '3.11'
        - '3.12'

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: "tests-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  # Unit Tests - Fast, lightweight tests
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == ''
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          - os: windows-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.12'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -e .[dev]
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short --durations=10 --maxfail=5 -k "not test_rcnn_with_frame and not test_gui_performance"
        
    - name: Upload unit test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          .pytest_cache/
          htmlcov/
        retention-days: 7

  # Integration Tests - Slower, more comprehensive tests
  integration-tests:
    name: Integration Tests (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == ''
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -e .[dev]
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short --durations=10 --maxfail=3 --timeout=300 -k "not test_scenellm_training and not test_scenellm_full_pipeline"
        
    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          .pytest_cache/
          htmlcov/
        retention-days: 7


  # Coverage Report - Generate comprehensive coverage
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.10-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.10-
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -e .[dev]
        
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src/m3sgg --cov-report=xml --cov-report=html --cov-report=term-missing --tb=short
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      run: |
        echo "Coverage report generated and available in artifacts"
        echo "Coverage threshold: 70%"

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        # Install fasterRCNN dependencies
        pip install cython cffi
        # Build fasterRCNN
        cd fasterRCNN/lib && python setup.py build_ext --inplace && cd ../..
        
    - name: Run flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run black check
      run: |
        black --check src/ tests/
        
    - name: Run isort check
      run: |
        isort --check-only src/ tests/
        
    - name: Run mypy
      run: |
        mypy src/m3sgg --ignore-missing-imports --no-strict-optional

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, coverage, code-quality]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create test summary
      run: |
        echo "# Test Results Summary" > test_summary.md
        echo "" >> test_summary.md
        echo "## Test Status" >> test_summary.md
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test_summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test_summary.md
        echo "- Coverage: ${{ needs.coverage.result }}" >> test_summary.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> test_summary.md
        echo "" >> test_summary.md
        echo "## Artifacts" >> test_summary.md
        echo "Test results and coverage reports are available in the artifacts section." >> test_summary.md
        
    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test_summary.md
        retention-days: 7
